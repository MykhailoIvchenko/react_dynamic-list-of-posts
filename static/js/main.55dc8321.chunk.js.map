{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedId","openPost","className","map","post","userId","title","type","onClick","id","BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","getPostComments","postId","comments","deleteComment","commentId","method","deleteResult","addComment","userName","email","text","headers","body","JSON","stringify","name","addResult","NewCommentForm","currentPostId","addNewComment","useState","commentUserName","setCommentUserName","commentEmail","setCommentEmail","commentText","setCommentText","onSubmit","event","value","placeholder","onChange","target","required","PostDetails","content","areCommentsChanged","changeCommentsState","areCommentsVisible","setAreCommentsVisible","setComments","reloadComments","postCommentsFS","useEffect","then","commentsArr","length","prevState","comment","reloading","preventDefault","getPosts","getPostDetails","postDetails","Loader","App","listOfPosts","setListOfPosts","selectedPostId","setSelectedPostId","selectedPostContent","setSelectedPostContent","selectedUserId","setSelectedUserId","isLoading","setIsLoading","setAreCommentsChanged","detailsOfSelectedPost","result","filter","prev","ReactDOM","render","document","getElementById"],"mappings":"kWAQaA,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,WACAC,EACI,EADJA,SAEA,OACE,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAd,SAEIH,EAAMI,KAAI,SAAAC,GAAI,OACZ,qBAEEF,UAAU,kBAFZ,UAIE,gCACE,6CACaE,EAAKC,OADlB,SAGCD,EAAKE,SAER,wBACEC,KAAK,SACLL,UAAU,2BACVM,QAAS,WACPP,EAASG,EAAKK,KAJlB,SAOGL,EAAKK,KAAOT,EAAa,QAAU,WAhBjCI,EAAKK,aCrBXC,EAAW,oCAEXC,EAAO,uCAAG,WAAOC,EAAaC,GAApB,eAAAC,EAAA,0DAGjBD,EAHiB,gCAIFE,MAAM,GAAD,OAAIL,GAAJ,OAAeE,GAAOC,GAJzB,OAInBG,EAJmB,6CAMFD,MAAM,GAAD,OAAIL,GAAJ,OAAeE,IANlB,OAMnBI,EANmB,iBAShBA,EAASC,GATO,uBAUb,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAV9B,iCAadJ,EAASK,QAbK,4CAAH,wDCAPC,EAAe,uCAAG,WAAOC,GAAP,eAAAT,EAAA,sEACNH,EAAQ,oBAAD,OAAqBY,IADtB,cACvBC,EADuB,yBAGtBA,GAHsB,2CAAH,sDAMfC,EAAa,uCAAG,WAAOC,GAAP,eAAAZ,EAAA,sEAEnBH,EAAQ,aAAD,OAAce,GAAa,CAAEC,OAAQ,WAFzB,cACrBC,EADqB,yBAIpBA,GAJoB,2CAAH,sDAObC,EAAU,uCACrB,WAAON,EAAgBO,EAAkBC,EAAeC,GAAxD,iBAAAlB,EAAA,6DACMD,EAAU,CACdc,OAAQ,OACRM,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAU,CACnBb,SACAc,KAAMP,EACNC,QACAG,KAAMF,KAVV,kBAgBUrB,EAAQ,YAAaE,GAhB/B,cAeQyB,EAfR,yBAkBSA,GAlBT,sCAoBQ,IAAIpB,MApBZ,yDADqB,4DCFVqB,G,MAAuC,SAAC,GAG9C,IAFLC,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAoBA,OACE,uBACE9C,UAAU,iBACV+C,SAAU,SAACC,GACTT,EAAcS,EAAOV,EAAeG,EAClCE,EAAcE,GAVpBH,EAAmB,IACnBE,EAAgB,IAChBE,EAAe,KAIf,UAQE,qBAAK9C,UAAU,aAAf,SACE,uBACEiD,MAAOR,EACPpC,KAAK,OACL8B,KAAK,OACLe,YAAY,YACZlD,UAAU,wBACVmD,SAlCgB,SAACH,GACvBN,EAAmBM,EAAMI,OAAOH,QAkC1BI,UAAQ,MAIZ,qBAAKrD,UAAU,aAAf,SACE,uBACEiD,MAAON,EACPtC,KAAK,QACL8B,KAAK,QACLe,YAAY,aACZlD,UAAU,wBACVmD,SA1CiB,SAACH,GACxBJ,EAAgBI,EAAMI,OAAOH,QA0CvBI,UAAQ,MAIZ,qBAAKrD,UAAU,aAAf,SACE,0BACEiD,MAAOJ,EACPV,KAAK,OACLe,YAAY,oBACZlD,UAAU,wBACVmD,SAjDgB,SAACH,GACvBF,EAAeE,EAAMI,OAAOH,QAiDtBI,UAAQ,MAIZ,wBACEhD,KAAK,SACLL,UAAU,uCAFZ,gCCzEOsD,G,MAAoC,SAAC,GAK3C,IAJLjC,EAII,EAJJA,OACAkC,EAGI,EAHJA,QACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,oBAEA,EAAoDjB,oBAAS,GAA7D,mBAAOkB,EAAP,KAA2BC,EAA3B,KAEA,EAAgCnB,mBAAoB,IAApD,mBAAOlB,EAAP,KAAiBsC,EAAjB,KAEMC,EAAc,uCAAG,4BAAAjD,EAAA,sEACQQ,EAAgBC,GADxB,OACfyC,EADe,OAGrBF,EAAYE,GAHS,2CAAH,qDAkCpB,OAJAC,qBAAU,WACR3C,EAAgBC,GAAQ2C,MAAK,SAAAC,GAAW,OAAIL,EAAYK,QACvD,CAAC5C,EAAQmC,IAGV,sBAAKxD,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,4BACGuD,MAIL,0BAASvD,UAAU,wBAAnB,UAGKsB,EAAS4C,OAAS,GAEjB,wBACE7D,KAAK,SACLL,UAAU,SACVM,QA9CqB,WAC/BqD,GAAsB,SAAAQ,GAAS,OAAKA,MA0C5B,SAMIT,EAAkB,gBACLpC,EAAS4C,OADJ,6BAEL5C,EAAS4C,OAFJ,eASxBR,GAEI,oBAAI1D,UAAU,oBAAd,SAEIsB,EAASrB,KAAI,SAAAmE,GAAO,OAClB,qBAEEpE,UAAU,yBAFZ,UAIE,wBACEK,KAAK,SACLL,UAAU,oCACVM,QAAS,WApDT,IAACkB,EAAmB6C,EAAnB7C,EAqDe4C,EAAQ7D,GArDJ8D,EAqDQR,EApDhDtC,EAAcC,GACd6C,IACAZ,KA8CkB,eASA,4BAAIW,EAAQpC,SAZPoC,EAAQ7D,YAsB7B,kCACE,qBACEP,UACEqB,EAAS,EACL,mCACA,4BAJR,SAOE,cAAC,EAAD,CACEiB,cAAejB,EACfkB,cA5FY,SACpBS,EACAV,EACAG,EACAE,EACAE,GAEAG,EAAMsB,iBAEN3C,EAAWW,EAAeG,EAAiBE,EAAcE,GACzDgB,IACAJ,gBCzCSc,EAAQ,uCAAG,4BAAA3D,EAAA,sEACFH,EAAQ,UADN,cAChBZ,EADgB,yBAGfA,GAHe,2CAAH,qDAYR2E,EAAc,uCAAG,WAAOnD,GAAP,eAAAT,EAAA,sEACFH,EAAQ,UAAD,OAAWY,IADhB,cACtBoD,EADsB,yBAGrBA,GAHqB,2CAAH,sDCXdC,G,MAAmB,kBAC9B,qBAAK1E,UAAU,SAAf,SACE,qBAAKA,UAAU,wBC+GJ2E,EA5GO,WACpB,MAAsCnC,mBAAiB,IAAvD,mBAAOoC,EAAP,KAAoBC,EAApB,KAEA,EAA4CrC,oBAAU,GAAtD,mBAAOsC,EAAP,KAAuBC,EAAvB,KAEA,EAAsDvC,mBAAS,IAA/D,mBAAOwC,EAAP,KAA4BC,EAA5B,KAEA,EAA4CzC,mBAAS,GAArD,mBAAO0C,EAAP,KAAuBC,EAAvB,KAEA,EAAkC3C,oBAAS,GAA3C,mBAAO4C,EAAP,KAAkBC,EAAlB,KAEA,EAAoD7C,oBAAS,GAA7D,mBAAOgB,EAAP,KAA2B8B,EAA3B,KAeMvF,EAAQ,uCAAG,WAAOsB,GAAP,eAAAT,EAAA,yDACXS,IAAWyD,EADA,uBAEbC,GAAmB,GACnBE,EAAuB,IAHV,iCAQfF,EAAkB1D,GAElBgE,GAAa,GAVE,SAYqBb,EAAenD,GAZpC,OAYTkE,EAZS,OAcfN,EAAuBM,EAAsBvD,MAE7CqD,GAAa,GAhBE,4CAAH,sDA6Bd,OANAtB,qBAAU,WACRQ,IAAWP,MAAK,SAAAwB,GACdX,EAAeW,QAEhB,IAGD,sBAAKxF,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACVmD,SAzCS,SAACH,GAClBmC,GAAmBnC,EAAMI,OAAOH,QAsC1B,UAIE,wBAAQA,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,2BACA,wBAAQA,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,kCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,IAAd,sCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,KAAd,mCAKN,uBAAMjD,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MArEe,IAAnBqF,EACKN,EAGFA,EACJa,QAAO,SAAAvF,GAAI,OAAIA,EAAKC,SAAW+E,KAiE1BpF,WAAYgF,EACZ/E,SAAUA,MAGd,qBAAKC,UAAU,eAAf,SAEI8E,EAAiB,IACfM,EACI,cAAC,EAAD,IAEA,cAAC,EAAD,CACE/D,OAAQyD,EACRvB,QAASyB,EACTxB,mBAAoBA,EACpBC,oBArDU,WAC1B6B,GAAsB,SAAAI,GAAI,OAAKA,kBClDnCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.55dc8321.chunk.js","sourcesContent":["import './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedId: number,\n  openPost: (postId: number) => void;\n};\n\nexport const PostsList: React.FC <Props> = ({\n  posts,\n  selectedId,\n  openPost,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {\n          posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  {`[User #${post.userId}]: `}\n                </b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  openPost(post.id);\n                }}\n              >\n                {post.id === selectedId ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options?: Option) => {\n  let response: Response;\n\n  if (options) {\n    response = await fetch(`${BASE_URL}${url}`, options);\n  } else {\n    response = await fetch(`${BASE_URL}${url}`);\n  }\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import { request } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const comments = await request(`/comments?postId=${postId}`);\n\n  return comments;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const deleteResult\n  = await request(`/comments/${commentId}`, { method: 'DELETE' });\n\n  return deleteResult;\n};\n\nexport const addComment\n= async (postId: number, userName: string, email: string, text: string) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name: userName,\n      email,\n      body: text,\n    }),\n  };\n\n  try {\n    const addResult\n    = await request('/comments', options);\n\n    return addResult;\n  } catch {\n    throw new Error();\n  }\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype FormProps = {\n  currentPostId: number;\n  addNewComment: (\n    event: React.FormEvent<HTMLFormElement>,\n    currentPostId: number,\n    commentUserName: string,\n    commentEmail: string,\n    commentText: string) => void;\n};\n\nexport const NewCommentForm: React.FC <FormProps> = ({\n  currentPostId,\n  addNewComment,\n}) => {\n  const [commentUserName, setCommentUserName] = useState('');\n\n  const [commentEmail, setCommentEmail] = useState('');\n\n  const [commentText, setCommentText] = useState('');\n\n  const nameInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentUserName(event.target.value);\n  };\n\n  const emailInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentEmail(event.target.value);\n  };\n\n  const textInputUpdate = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentText(event.target.value);\n  };\n\n  const resetCommentValues = () => {\n    setCommentUserName('');\n    setCommentEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        addNewComment(event, currentPostId, commentUserName,\n          commentEmail, commentText);\n        resetCommentValues();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          value={commentUserName}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={nameInputUpdate}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={commentEmail}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={emailInputUpdate}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={commentText}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={textInputUpdate}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype PostProps = {\n  postId: number,\n  content: string,\n  areCommentsChanged: boolean,\n  changeCommentsState: () => void,\n};\n\nexport const PostDetails: React.FC <PostProps> = ({\n  postId,\n  content,\n  areCommentsChanged,\n  changeCommentsState,\n}) => {\n  const [areCommentsVisible, setAreCommentsVisible] = useState(true);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const reloadComments = async () => {\n    const postCommentsFS = await getPostComments(postId);\n\n    setComments(postCommentsFS);\n  };\n\n  const toggleCommentsVisibility = () => {\n    setAreCommentsVisible(prevState => !prevState);\n  };\n\n  const addNewComment = (\n    event: React.FormEvent<HTMLFormElement>,\n    currentPostId: number,\n    commentUserName: string,\n    commentEmail: string,\n    commentText: string,\n  ) => {\n    event.preventDefault();\n\n    addComment(currentPostId, commentUserName, commentEmail, commentText);\n    reloadComments();\n    changeCommentsState();\n  };\n\n  const removeComment = (commentId: number, reloading: () => void) => {\n    deleteComment(commentId);\n    reloading();\n    changeCommentsState();\n  };\n\n  useEffect(() => {\n    getPostComments(postId).then(commentsArr => setComments(commentsArr));\n  }, [postId, areCommentsChanged]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {content}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        {\n          (comments.length > 0)\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleCommentsVisibility}\n            >\n              {\n                areCommentsVisible\n                  ? ` Hide ${comments.length} comments`\n                  : ` Show ${comments.length} comments`\n              }\n            </button>\n          )\n        }\n\n        {\n          areCommentsVisible\n            && (\n              <ul className=\"PostDetails__list\">\n                {\n                  comments.map(comment => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          removeComment(comment.id, reloadComments);\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))\n                }\n              </ul>\n            )\n        }\n\n      </section>\n\n      <section>\n        <div\n          className={\n            postId < 1\n              ? 'PostDetails__form-wrapper Hidden'\n              : 'PostDetails__form-wrapper'\n          }\n        >\n          <NewCommentForm\n            currentPostId={postId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPosts = async () => {\n  const posts = await request('/posts');\n\n  return posts;\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const userPosts = await request(`/posts/?userId=${userId}`);\n\n  return userPosts;\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetails, getPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [listOfPosts, setListOfPosts] = useState<Post[]>([]);\n\n  const [selectedPostId, setSelectedPostId] = useState(-1);\n\n  const [selectedPostContent, setSelectedPostContent] = useState('');\n\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [areCommentsChanged, setAreCommentsChanged] = useState(false);\n\n  const getVisibleListOfPosts = () => {\n    if (selectedUserId === 0) {\n      return listOfPosts;\n    }\n\n    return listOfPosts\n      .filter(post => post.userId === selectedUserId);\n  };\n\n  const selectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const openPost = async (postId: number) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(-1);\n      setSelectedPostContent('');\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n\n    setIsLoading(true);\n\n    const detailsOfSelectedPost = await getPostDetails(postId);\n\n    setSelectedPostContent(detailsOfSelectedPost.body);\n\n    setIsLoading(false);\n  };\n\n  const changeCommentsState = () => {\n    setAreCommentsChanged(prev => !prev);\n  };\n\n  useEffect(() => {\n    getPosts().then(result => {\n      setListOfPosts(result);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__content\">\n          <PostsList\n            posts={getVisibleListOfPosts()}\n            selectedId={selectedPostId}\n            openPost={openPost}\n          />\n        </div>\n        <div className=\"App__sidebar\">\n          {\n            selectedPostId > 0 && (\n              isLoading\n                ? <Loader />\n                : (\n                  <PostDetails\n                    postId={selectedPostId}\n                    content={selectedPostContent}\n                    areCommentsChanged={areCommentsChanged}\n                    changeCommentsState={changeCommentsState}\n                  />\n                ))\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}