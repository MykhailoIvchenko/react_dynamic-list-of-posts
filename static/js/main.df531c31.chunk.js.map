{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","postsList","selectedId","handleOpenClick","className","map","post","userId","title","type","onClick","id","BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","requestWithOptions","options","getPostComments","postId","comments","deleteComment","commentId","method","deleteResult","addComment","userName","email","text","headers","body","JSON","stringify","name","addResult","NewCommentForm","currentPostId","addNewComment","useState","commentUserName","setCommentUserName","commentEmail","setCommentEmail","commentText","setCommentText","onSubmit","event","value","placeholder","onChange","target","required","PostDetails","content","areCommentsVisible","setAreCommentsVisible","setComments","commentsChanged","setCommentsChanged","useEffect","then","commentsArr","useMemo","length","prevState","comment","preventDefault","getPosts","posts","getPostDetails","postDetails","App","listOfPosts","setListOfPosts","visibleListOfPosts","setVisibleListOfPosts","selectedPostId","setSelectedPostId","selectedPostContent","setSelectedPostContent","handleButtonOpenClick","detailsOfSelectedPost","result","filter","ReactDOM","render","document","getElementById"],"mappings":"0VAQaA,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,UACAC,EAEI,EAFJA,WACAC,EACI,EADJA,gBAEA,OACE,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAd,SAEIH,EAAUI,KAAI,SAAAC,GAAI,OAChB,mCACE,qBAEEF,UAAU,kBAFZ,UAIE,gCACE,6CACaE,EAAKC,OADlB,SAGCD,EAAKE,SAGR,wBACEC,KAAK,SACLL,UAAU,2BACVM,QAAS,WACPP,EAAgBG,EAAKK,KAJzB,SAOGL,EAAKK,KAAOT,EAAa,QAAU,WAjBjCI,EAAKK,eCtBbC,EAAW,oCAEXC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACEC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,IADtB,WACfG,EADe,QAGPC,GAHO,sBAIb,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAJ9B,gCAOdJ,EAASK,QAPK,2CAAH,sDAUPC,EAAkB,uCAAG,WAAOT,EAAaU,GAApB,eAAAT,EAAA,sEACTC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,GAAOU,GADlB,WAC1BP,EAD0B,QAGlBC,GAHkB,sBAIxB,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAJnB,gCAOzBJ,EAASK,QAPgB,2CAAH,wDCVlBG,EAAe,uCAAG,WAAOC,GAAP,eAAAX,EAAA,sEACNF,EAAQ,oBAAD,OAAqBa,IADtB,cACvBC,EADuB,yBAGtBA,GAHsB,2CAAH,sDAMfC,EAAa,uCAAG,WAAOC,GAAP,eAAAd,EAAA,sEAEnBQ,EAAmB,aAAD,OAAcM,GAAa,CAAEC,OAAQ,WAFpC,cACrBC,EADqB,yBAIpBA,GAJoB,2CAAH,sDAObC,EAAU,uCACrB,WAAON,EAAgBO,EAAkBC,EAAeC,GAAxD,iBAAApB,EAAA,6DACMS,EAAU,CACdM,OAAQ,OACRM,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAU,CACnBb,SACAc,KAAMP,EACNC,QACAG,KAAMF,KAVV,kBAgBUZ,EAAmB,YAAaC,GAhB1C,cAeQiB,EAfR,yBAkBSA,GAlBT,sCAoBQ,IAAItB,MApBZ,yDADqB,4DCFVuB,G,MAAuC,SAAC,GAG9C,IAFLC,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,EAGIC,mBAAS,IAHb,mBACEC,EADF,KAEEC,EAFF,KAKA,EAGIF,mBAAS,IAHb,mBACEG,EADF,KAEEC,EAFF,KAKA,EAGIJ,mBAAS,IAHb,mBACEK,EADF,KAEEC,EAFF,KAuBA,OACE,uBACE/C,UAAU,iBACVgD,SAAU,SAACC,GACTT,EAAcS,EAAOV,EAAeG,EAClCE,EAAcE,GAVpBH,EAAmB,IACnBE,EAAgB,IAChBE,EAAe,KAIf,UAQE,qBAAK/C,UAAU,aAAf,SACE,uBACEkD,MAAOR,EACPrC,KAAK,OACL+B,KAAK,OACLe,YAAY,YACZnD,UAAU,wBACVoD,SAlCgB,SAACH,GACvBN,EAAmBM,EAAMI,OAAOH,QAkC1BI,UAAQ,MAIZ,qBAAKtD,UAAU,aAAf,SACE,uBACEkD,MAAON,EACPvC,KAAK,QACL+B,KAAK,QACLe,YAAY,aACZnD,UAAU,wBACVoD,SA1CiB,SAACH,GACxBJ,EAAgBI,EAAMI,OAAOH,QA0CvBI,UAAQ,MAIZ,qBAAKtD,UAAU,aAAf,SACE,0BACEkD,MAAOJ,EACPV,KAAK,OACLe,YAAY,oBACZnD,UAAU,wBACVoD,SAjDgB,SAACH,GACvBF,EAAeE,EAAMI,OAAOH,QAiDtBI,UAAQ,MAIZ,wBACEjD,KAAK,SACLL,UAAU,uCAFZ,gCCpFOuD,G,MAAoC,SAAC,GAG3C,IAFLjC,EAEI,EAFJA,OACAkC,EACI,EADJA,QAIA,EAGIf,oBAAS,GAHb,mBACEgB,EADF,KAEEC,EAFF,KAKA,EAGIjB,mBAAoB,IAHxB,mBACElB,EADF,KAEEoC,EAFF,KAKA,EAGIlB,oBAAS,GAHb,mBACEmB,EADF,KAEEC,EAFF,KAqCA,OAVAC,qBAAU,WACRzC,EAAgBC,GAAQyC,MAAK,SAAAC,GAAW,OAAIL,EAAYK,QACvD,IAEHC,kBAAO,sBAAC,4BAAAtD,EAAA,sEACoBU,EAAgBC,GADpC,OACA0C,EADA,OAGNL,EAAYK,GAHN,2CAIL,CAACJ,EAAiBtC,IAGnB,sBAAKtB,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,4BACGwD,MAIL,0BAASxD,UAAU,wBAAnB,UAGKuB,EAAS2C,OAAS,GAEjB,wBACE7D,KAAK,SACLL,UAAU,SACVM,QAlDqB,WAC/BoD,GAAsB,SAAAS,GAAS,OAAKA,MA8C5B,SAMIV,EAAkB,gBACLlC,EAAS2C,OADJ,6BAEL3C,EAAS2C,OAFJ,eASxBT,GAEI,oBAAIzD,UAAU,oBAAd,SAEIuB,EAAStB,KAAI,SAAAmE,GAAO,OAClB,mCACE,qBAEEpE,UAAU,yBAFZ,UAIE,wBACEK,KAAK,SACLL,UAAU,oCACVM,QAAS,WA1DX,IAACmB,IA2DiB2C,EAAQ7D,GA1D9CiB,EAAcC,GACdoC,GAAmB,SAAAM,GAAS,OAAKA,MAqDb,eASA,4BAAIC,EAAQnC,SAZPmC,EAAQ7D,cAuB/B,kCACE,qBAAKP,UAAU,4BAAf,SACE,cAAC,EAAD,CACEuC,cAAejB,EACfkB,cA5FY,SACpBS,EACAV,EACAG,EACAE,EACAE,GAEAG,EAAMoB,iBAENzC,EAAWW,EAAeG,EAAiBE,EAAcE,GACzDe,GAAmB,SAAAM,GAAS,OAAKA,iBC3CxBG,EAAQ,uCAAG,4BAAA3D,EAAA,sEACFF,EAAQ,UADN,cAChB8D,EADgB,yBAGfA,GAHe,2CAAH,qDAYRC,EAAc,uCAAG,WAAOlD,GAAP,eAAAX,EAAA,sEACFF,EAAQ,UAAD,OAAWa,IADhB,cACtBmD,EADsB,yBAGrBA,GAHqB,2CAAH,sDCyGZC,EAhHO,WACpB,MAGIjC,mBAAiB,IAHrB,mBACEkC,EADF,KAEEC,EAFF,KAKA,EAGInC,mBAAS,YAAIkC,IAHjB,mBACEE,EADF,KAEEC,EAFF,KAKA,EAGIrC,oBAAU,GAHd,mBACEsC,EADF,KAEEC,EAFF,KAKA,EAGIvC,mBAAS,IAHb,mBACEwC,EADF,KAEEC,EAFF,KAsBMC,EAAqB,uCAAG,WAAO7D,GAAP,eAAAX,EAAA,yDACxBW,IAAWyD,EADa,uBAE1BC,GAAmB,GACnBE,EAAuB,IAHG,iCAQ5BF,EAAkB1D,GARU,SAUQkD,EAAelD,GAVvB,OAUtB8D,EAVsB,OAY5BF,EAAuBE,EAAsBnD,MAZjB,2CAAH,sDAsB3B,OAPA6B,qBAAU,WACRQ,IAAWP,MAAK,SAAAsB,GACdT,EAAeS,GACfP,EAAsBO,QAEvB,IAGD,sBAAKrF,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACVoD,SA/CS,SAACH,GACU,KAAvBA,EAAMI,OAAOH,MAMlB4B,EAAsBH,EACnBW,QAAO,SAAApF,GACN,QAAIA,EAAKC,QACAD,EAAKC,UAAY8C,EAAMI,OAAOH,UARzC4B,EAAsB,YAAIH,KA2CtB,UAIE,wBAAQzB,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,2BACA,wBAAQA,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,kCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,IAAd,sCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,KAAd,mCAKN,uBAAMlD,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,UAAWgF,EACX/E,WAAYiF,EACZhF,gBAAiBoF,MAIrB,qBAAKnF,UAAU,eAAf,SAEuB,IAAnB+E,GAEE,cAAC,EAAD,CACEzD,OAAQyD,EACRvB,QAASyB,aCvGzBM,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df531c31.chunk.js","sourcesContent":["import './PostsList.scss';\n\ntype Props = {\n  postsList: Post[],\n  selectedId: number,\n  handleOpenClick: (postId: number) => void;\n};\n\nexport const PostsList: React.FC <Props> = ({\n  postsList,\n  selectedId,\n  handleOpenClick,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {\n          postsList.map(post => (\n            <>\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>\n                    {`[User #${post.userId}]: `}\n                  </b>\n                  {post.title}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    handleOpenClick(post.id);\n                  }}\n                >\n                  {post.id === selectedId ? 'Close' : 'Open'}\n                </button>\n              </li>\n            </>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const requestWithOptions = async (url: string, options: Option) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getUsers = async () => {\n  const userPosts = await request('/users');\n\n  return userPosts;\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import { request, requestWithOptions } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const comments = await request(`/comments?postId=${postId}`);\n\n  return comments;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const deleteResult\n  = await requestWithOptions(`/comments/${commentId}`, { method: 'DELETE' });\n\n  return deleteResult;\n};\n\nexport const addComment\n= async (postId: number, userName: string, email: string, text: string) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name: userName,\n      email,\n      body: text,\n    }),\n  };\n\n  try {\n    const addResult\n    = await requestWithOptions('/comments', options);\n\n    return addResult;\n  } catch {\n    throw new Error();\n  }\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype FormProps = {\n  currentPostId: number;\n  addNewComment: (\n    event: React.FormEvent<HTMLFormElement>,\n    currentPostId: number,\n    commentUserName: string,\n    commentEmail: string,\n    commentText: string) => void;\n};\n\nexport const NewCommentForm: React.FC <FormProps> = ({\n  currentPostId,\n  addNewComment,\n}) => {\n  const [\n    commentUserName,\n    setCommentUserName,\n  ] = useState('');\n\n  const [\n    commentEmail,\n    setCommentEmail,\n  ] = useState('');\n\n  const [\n    commentText,\n    setCommentText,\n  ] = useState('');\n\n  const nameInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentUserName(event.target.value);\n  };\n\n  const emailInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentEmail(event.target.value);\n  };\n\n  const textInputUpdate = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentText(event.target.value);\n  };\n\n  const resetCommentValues = () => {\n    setCommentUserName('');\n    setCommentEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        addNewComment(event, currentPostId, commentUserName,\n          commentEmail, commentText);\n        resetCommentValues();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          value={commentUserName}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={nameInputUpdate}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={commentEmail}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={emailInputUpdate}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={commentText}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={textInputUpdate}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype PostProps = {\n  postId: number,\n  content: string,\n};\n\nexport const PostDetails: React.FC <PostProps> = ({\n  postId,\n  content,\n}) => {\n  // alert('Post details rendering');\n\n  const [\n    areCommentsVisible,\n    setAreCommentsVisible,\n  ] = useState(true);\n\n  const [\n    comments,\n    setComments,\n  ] = useState<Comment[]>([]);\n\n  const [\n    commentsChanged,\n    setCommentsChanged,\n  ] = useState(false);\n\n  const toggleCommentsVisibility = () => {\n    setAreCommentsVisible(prevState => !prevState);\n  };\n\n  const addNewComment = (\n    event: React.FormEvent<HTMLFormElement>,\n    currentPostId: number,\n    commentUserName: string,\n    commentEmail: string,\n    commentText: string,\n  ) => {\n    event.preventDefault();\n\n    addComment(currentPostId, commentUserName, commentEmail, commentText);\n    setCommentsChanged(prevState => !prevState);\n  };\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId);\n    setCommentsChanged(prevState => !prevState);\n  };\n\n  useEffect(() => {\n    getPostComments(postId).then(commentsArr => setComments(commentsArr));\n  }, []);\n\n  useMemo(async () => {\n    const commentsArr = await getPostComments(postId);\n\n    setComments(commentsArr);\n  }, [commentsChanged, postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {content}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        {\n          (comments.length > 0)\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={toggleCommentsVisibility}\n            >\n              {\n                areCommentsVisible\n                  ? ` Hide ${comments.length} comments`\n                  : ` Show ${comments.length} comments`\n              }\n            </button>\n          )\n        }\n\n        {\n          areCommentsVisible\n            && (\n              <ul className=\"PostDetails__list\">\n                {\n                  comments.map(comment => (\n                    <>\n                      <li\n                        key={comment.id}\n                        className=\"PostDetails__list-item\"\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            removeComment(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    </>\n                  ))\n                }\n              </ul>\n            )\n        }\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            currentPostId={postId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPosts = async () => {\n  const posts = await request('/posts');\n\n  return posts;\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const userPosts = await request(`/posts/?userId=${userId}`);\n\n  return userPosts;\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetails, getPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [\n    listOfPosts,\n    setListOfPosts,\n  ] = useState<Post[]>([]);\n\n  const [\n    visibleListOfPosts,\n    setVisibleListOfPosts,\n  ] = useState([...listOfPosts]);\n\n  const [\n    selectedPostId,\n    setSelectedPostId,\n  ] = useState(-1);\n\n  const [\n    selectedPostContent,\n    setSelectedPostContent,\n  ] = useState('');\n\n  const userSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value === 0) {\n      setVisibleListOfPosts([...listOfPosts]);\n\n      return;\n    }\n\n    setVisibleListOfPosts(listOfPosts\n      .filter(post => {\n        if (post.userId) {\n          return post.userId === +event.target.value;\n        }\n\n        return false;\n      }));\n  };\n\n  const handleButtonOpenClick = async (postId: number) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(-1);\n      setSelectedPostContent('');\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n\n    const detailsOfSelectedPost = await getPostDetails(postId);\n\n    setSelectedPostContent(detailsOfSelectedPost.body);\n  };\n\n  useEffect(() => {\n    getPosts().then(result => {\n      setListOfPosts(result);\n      setVisibleListOfPosts(result);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={userSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsList={visibleListOfPosts}\n            selectedId={selectedPostId}\n            handleOpenClick={handleButtonOpenClick}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPostId !== 0\n            && (\n              <PostDetails\n                postId={selectedPostId}\n                content={selectedPostContent}\n                // comments={commentsContent}\n                // removeButtonClick={removeComment}\n              />\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}